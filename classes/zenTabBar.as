// zenTabBar Class// Container of Zen Tabs// Part of the Zen UX Library// (cc) 2010 Jam Zhang// jammind@gmail.compackage  {		import flash.display.Sprite;	import flash.events.MouseEvent;	import com.greensock.*;	import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.events.Event;			public class zenTabBar extends Sprite {				public static const TOTAL_TABS:int=8;		public static const VIEW_WIDTH:int=480;		public static const VIEW_MARGIN:int=5;		public static const BAR_WIDTH:int=zenTab.TAB_WIDTH*TOTAL_TABS;		public static const MIN_BAR_X:int=VIEW_WIDTH-BAR_WIDTH;		public static const BORDER_SLOWDOWN_FACTOR:Number=.35;		public static const TWEENING_TIME:Number=.25;		public static const BAR_MOVEMENT_PER_TAB_LOOSE:int=(zenTab.TAB_WIDTH*TOTAL_TABS-(VIEW_WIDTH-VIEW_MARGIN*2))/(TOTAL_TABS-1);		public static const TAB_DISTANCE_TIGHT:int=zenTab.TAB_WIDTH-BAR_MOVEMENT_PER_TAB_LOOSE;		public static const FREE_DRAG_MIN_MOVEMENT:int=10;				private var tabs:Array=[];		private var activeTab:int=0;		private var temporaryActiveTab:int=0;		private var overlay:MovieClip=(parent as MovieClip).overlay;		private var freeDragFingerX0,freeDragTabsX0:int;		private var momentum:Momentum=new Momentum({minValue:MIN_BAR_X,maxValue:0});		private var inMotion:Boolean=false;		private var inDrag:Boolean=false;		private var inFreeDragMode:Boolean=false;				public function zenTabBar() {						overlay.alpha=0;						// creating tabs			for (var a:int=0;a<TOTAL_TABS;a++) {				var t:zenTab=new zenTab(this, a, a==0);				t.x=tabPositionLoose(a);				addChild(t);				tabs.push(t);			}					}				// positioning logic		private function tabPositionLoose(id:int):int {			return zenTab.TAB_WIDTH*id;		}				private function tabPositionTight(id:int):int {			return tabPositionLoose(activeTab)+(id-activeTab)*TAB_DISTANCE_TIGHT;		}				private function barPositionLoose(activeId:int):int {			return VIEW_MARGIN-BAR_MOVEMENT_PER_TAB_LOOSE*activeId;		}				private function restrictedBarX(v:Number):Number {			if(v>0) {				return v*BORDER_SLOWDOWN_FACTOR;			} else if(v<MIN_BAR_X) {				return MIN_BAR_X+(v-MIN_BAR_X)*BORDER_SLOWDOWN_FACTOR;			} else {				return v;			}		}				// layer arranger		function bringTabToFront(n:int):void {			tabs[temporaryActiveTab].deactivate();			tabs[n].activate();			temporaryActiveTab=n;			for (var a:int=0;a<TOTAL_TABS;a++) {				setChildIndex(tabs[a],TOTAL_TABS-Math.abs(temporaryActiveTab-a)-1);			}		}				// overlay logic		function showOverlay(id:int):void {			overlay.icon.gotoAndStop(id+1);			TweenLite.to(overlay, TWEENING_TIME, {alpha:1});		}				function hideOverlay():void {			TweenLite.to(overlay, TWEENING_TIME, {alpha:0});		}				// tab handlers		public function onTabDown(id:int):void {						if(id==activeTab&&!inMotion&&!inFreeDragMode) {								// condensed mode				showOverlay(id);				bringTabToFront(activeTab);				for (var a:int=0;a<TOTAL_TABS;a++) {					TweenLite.to(tabs[a], TWEENING_TIME, {x:tabPositionTight(a)});					tabs[a].addEventListener(MouseEvent.MOUSE_OVER, onCondensedMode);				}				stage.addEventListener(MouseEvent.MOUSE_UP, onCondensedMode);							} else {								// free drag mode				if(inMotion) {					inMotion=false;					removeEventListener(Event.ENTER_FRAME,onMomentum);				}								inDrag=false;				freeDragFingerX0=stage.mouseX;				freeDragTabsX0=restrictedBarX(x);				momentum.value=restrictedBarX(x);								tabs[activeTab].deactivate();				temporaryActiveTab=activeTab=id;				tabs[activeTab].activate();				stage.addEventListener(MouseEvent.MOUSE_MOVE, onFreeDragMode);				stage.addEventListener(MouseEvent.MOUSE_UP, onFreeDragMode);							}					}				// condensed mode finger handler		private function onCondensedMode(e:MouseEvent):void {						switch (e.type) {								case MouseEvent.MOUSE_OVER:					bringTabToFront((e.currentTarget as zenTab).id);					overlay.icon.gotoAndStop(temporaryActiveTab+1);					break;									case MouseEvent.MOUSE_UP:					hideOverlay();					activeTab=temporaryActiveTab;					for (var a:int=0;a<TOTAL_TABS;a++) {						TweenLite.to(tabs[a], TWEENING_TIME, {x:tabPositionLoose(a)});						tabs[a].removeEventListener(MouseEvent.MOUSE_OVER, onCondensedMode);					}					TweenLite.to(this, TWEENING_TIME, {x:barPositionLoose(activeTab)});					e.currentTarget.removeEventListener(MouseEvent.MOUSE_UP, onCondensedMode);					break;								}					}						private function syncFreeDragActiveTab():void {			var a:int=Math.max(0,Math.min(Math.round((freeDragTabsX0-x)/zenTab.TAB_WIDTH)+temporaryActiveTab,TOTAL_TABS-1));			trace('syncFreeDragActiveTab '+a);			tabs[temporaryActiveTab].deactivate();			temporaryActiveTab=a;			tabs[temporaryActiveTab].activate();			showOverlay(temporaryActiveTab);		}				// free drag mode finger handler		private function onFreeDragMode(e:MouseEvent):void {			switch (e.type) {				case MouseEvent.MOUSE_MOVE:					if(inDrag) {						x=restrictedBarX(freeDragTabsX0+(e.stageX-freeDragFingerX0));						momentum.value=x;						//syncFreeDragActiveTab();					} else if(Math.abs(e.stageX-freeDragFingerX0)>FREE_DRAG_MIN_MOVEMENT) {						// ignore slight movement						inDrag=true;						inFreeDragMode=true;						showOverlay(activeTab);					}					break;									case MouseEvent.MOUSE_UP:					e.currentTarget.removeEventListener(MouseEvent.MOUSE_MOVE, onFreeDragMode);					e.currentTarget.removeEventListener(MouseEvent.MOUSE_UP, onFreeDragMode);					if(inDrag) {						inMotion=true;						momentum.release();						addEventListener(Event.ENTER_FRAME,onMomentum);					} else {						// straight click						TweenLite.to(this, TWEENING_TIME, {x:barPositionLoose(activeTab)});						activeTab=temporaryActiveTab;						inFreeDragMode=false;						hideOverlay();					}					break;			}		}				// when tabs are sliding with momentum with finger released		private function onMomentum(e:Event):void {			if(!momentum.inMotion) {				inMotion=false;				removeEventListener(Event.ENTER_FRAME,onMomentum);			} else {				x=momentum.value;				//x=restrictedBarX(momentum.value);				//syncFreeDragActiveTab();			}		}			}	}